/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from './common'

export type PaymentMetadataStruct = {
  amount: BigNumberish
  paymentId: BytesLike
  paymentBlock: BigNumberish
  tokenAddress: AddressLike
  tokenType: BigNumberish
  payer: AddressLike
  metadata: string
  processed: boolean
}

export type PaymentMetadataStructOutput = [
  amount: bigint,
  paymentId: string,
  paymentBlock: bigint,
  tokenAddress: string,
  tokenType: bigint,
  payer: string,
  metadata: string,
  processed: boolean
] & {
  amount: bigint
  paymentId: string
  paymentBlock: bigint
  tokenAddress: string
  tokenType: bigint
  payer: string
  metadata: string
  processed: boolean
}

export interface IOpenGatewayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'confirmationBlockHeight'
      | 'delistToken'
      | 'getPayment'
      | 'makePayment'
      | 'tokenWhitelist'
      | 'updateConfirmationBlockHeight'
      | 'whitelistToken'
      | 'withdrawERC20'
      | 'withdrawNative'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'confirmationBlockHeight', values?: undefined): string
  encodeFunctionData(functionFragment: 'delistToken', values: [AddressLike[]]): string
  encodeFunctionData(functionFragment: 'getPayment', values: [BytesLike]): string
  encodeFunctionData(
    functionFragment: 'makePayment',
    values: [BigNumberish, BytesLike, AddressLike, AddressLike, string]
  ): string
  encodeFunctionData(functionFragment: 'tokenWhitelist', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'updateConfirmationBlockHeight', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'whitelistToken', values: [AddressLike[]]): string
  encodeFunctionData(functionFragment: 'withdrawERC20', values: [AddressLike, AddressLike]): string
  encodeFunctionData(functionFragment: 'withdrawNative', values: [AddressLike]): string

  decodeFunctionResult(functionFragment: 'confirmationBlockHeight', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'delistToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPayment', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'makePayment', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenWhitelist', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateConfirmationBlockHeight', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'whitelistToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawERC20', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawNative', data: BytesLike): Result
}

export interface IOpenGateway extends BaseContract {
  connect(runner?: ContractRunner | null): IOpenGateway
  waitForDeployment(): Promise<this>

  interface: IOpenGatewayInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>

  confirmationBlockHeight: TypedContractMethod<[], [bigint], 'view'>

  delistToken: TypedContractMethod<[tokens: AddressLike[]], [void], 'nonpayable'>

  getPayment: TypedContractMethod<
    [paymentId: BytesLike],
    [
      [PaymentMetadataStructOutput, bigint] & {
        paymentMetadata: PaymentMetadataStructOutput
        currentBlock: bigint
      }
    ],
    'view'
  >

  makePayment: TypedContractMethod<
    [amount: BigNumberish, paymentId: BytesLike, tokenAddress: AddressLike, payer: AddressLike, metadata: string],
    [void],
    'payable'
  >

  tokenWhitelist: TypedContractMethod<[arg0: AddressLike], [boolean], 'view'>

  updateConfirmationBlockHeight: TypedContractMethod<[newConfirmationBlockHeight: BigNumberish], [void], 'nonpayable'>

  whitelistToken: TypedContractMethod<[tokens: AddressLike[]], [void], 'nonpayable'>

  withdrawERC20: TypedContractMethod<[token: AddressLike, recipient: AddressLike], [boolean], 'nonpayable'>

  withdrawNative: TypedContractMethod<[recipient: AddressLike], [boolean], 'nonpayable'>

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T

  getFunction(nameOrSignature: 'confirmationBlockHeight'): TypedContractMethod<[], [bigint], 'view'>
  getFunction(nameOrSignature: 'delistToken'): TypedContractMethod<[tokens: AddressLike[]], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'getPayment'): TypedContractMethod<
    [paymentId: BytesLike],
    [
      [PaymentMetadataStructOutput, bigint] & {
        paymentMetadata: PaymentMetadataStructOutput
        currentBlock: bigint
      }
    ],
    'view'
  >
  getFunction(
    nameOrSignature: 'makePayment'
  ): TypedContractMethod<
    [amount: BigNumberish, paymentId: BytesLike, tokenAddress: AddressLike, payer: AddressLike, metadata: string],
    [void],
    'payable'
  >
  getFunction(nameOrSignature: 'tokenWhitelist'): TypedContractMethod<[arg0: AddressLike], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'updateConfirmationBlockHeight'
  ): TypedContractMethod<[newConfirmationBlockHeight: BigNumberish], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'whitelistToken'): TypedContractMethod<[tokens: AddressLike[]], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'withdrawERC20'
  ): TypedContractMethod<[token: AddressLike, recipient: AddressLike], [boolean], 'nonpayable'>
  getFunction(nameOrSignature: 'withdrawNative'): TypedContractMethod<[recipient: AddressLike], [boolean], 'nonpayable'>

  filters: {}
}
